// Generates GlassMapper models

using System.Linq;
using System.Collections.Generic;

Log.Debug($"Emitting TypeScript interfaces for {ConfigurationName}...");

Code.AppendLine($@"
/**
 * <auto-generated>
 *     This code was generated by a tool.
 *
 *     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 * </auto-generated>
 */ 

{ RenderImportStatements()}
{ RenderTemplates()}
");
public string RenderImportStatements()
{
    var localCode = new System.Text.StringBuilder();

    var foundModules = new System.Collections.Generic.HashSet<string>();

    var currentRootNamespace = Templates.First().RootNamespace;

    localCode.AppendLine($@"// @ts-ignore Prevent noUnusedLocals from triggering an error, we import all core field types to minimize changing to code generation.");
    localCode.AppendLine(@"import { Sitecore } from ""./_.Sitecore.Override""");

    foreach (var template in GetBaseTemplates(Templates))
    {
        if (template.RootNamespace != currentRootNamespace && !foundModules.Contains(template.RootNamespace))
        {            
            foundModules.Add(template.RootNamespace);
            var split = ((string)template.RootNamespace).Split('.');
            var layer = split[0];
            var module = split[1];
            localCode.AppendLine($@"import {{ {module} }} from ""./{layer}.{module}.model""");
        }
    }

    localCode.AppendLine($@"// @ts-ignore Prevent noUnusedLocals from triggering an error, we import all core field types to minimize changing to code generation.");
    localCode.AppendLine($@"import {{ ComponentRendering, RouteData, Field, ImageField, FileField, LinkField }} from '@sitecore-jss/sitecore-jss-nextjs';");
    localCode.AppendLine($@"// @ts-ignore Prevent noUnusedLocals from triggering an error, we import all core field types to minimize changing to code generation.");
    localCode.AppendLine($@"import {{ DefaultComponentProps }} from '@/lib/component-props';");

    
    return localCode.ToString();
}
public string RenderTemplates()
{
    var localCode = new System.Text.StringBuilder();

    foreach (var template in Templates)
    {
        if (IsRenderingParameters(template))
        {
            // Render param interfaces
            localCode.AppendLine($@"
export namespace {GetNameSpace(template)} {{
    export type {template.CodeName} = {RenderBaseInterfaces(template)}{{ { RenderInterfaceParamsFields(template) } 
    }}; 
}}");
        } 
        else
        {
            // Render Generic interfaces
            localCode.AppendLine($@"
export namespace {GetNameSpace(template, TemplateType.None)} {{
    export type {template.CodeName} = {RenderBaseInterfaces(template, TemplateType.None)}{{ { RenderInterfaceFields(template) } }}; 
}}");

            if (IsRoute(template))
            {
                // Render route interfaces
                localCode.AppendLine($@"
export namespace {GetNameSpace(template, TemplateType.Route)} {{
    export type {template.CodeName} = {RenderBaseInterfaces(template, TemplateType.Route)}{{ }}; 
}}");
            }
        }
    }

    return localCode.ToString();
}

public bool IsRenderingParameters(TemplateCodeGenerationMetadata template)
{
    return IsOrInheritsFromTemplate(template, "d24bb6f7-6088-4cbf-a4cc-5746e8ae78a9");
}

public bool IsRoute(TemplateCodeGenerationMetadata template)
{
    return IsOrInheritsFromTemplate(template, "{2B03BA30-ACDA-4955-B331-60ECDFF30490}");
}

public bool IsOrInheritsFromTemplate(TemplateCodeGenerationMetadata template, string templateId)
{
    var isTemplate = template.Id == System.Guid.Parse(templateId);

    if (isTemplate)
    {
        return true;
    }

    foreach (var baseTemplate in template.BaseTemplates)
    {
        if (IsOrInheritsFromTemplate(baseTemplate, templateId))
        {
            return true;
        }
    }

    return false;
}

public string GetShortNamespace(TemplateCodeGenerationMetadata template)
{
    return template.Namespace.Replace("Feature.", "").Replace("Foundation.", "").Replace("Project.", "");
}

public string GetNameSpace(TemplateCodeGenerationMetadata template, TemplateType templateType = TemplateType.None)
{
    var shortNamespace = GetShortNamespace(template);
    if (IsRenderingParameters(template))
    {   
        return $"{shortNamespace}.Params";
    }
    switch (templateType)
    {
        case TemplateType.Route:
            return $"{shortNamespace}";
            break;
        case TemplateType.None:
        default:
            return $"{shortNamespace}.Fields";
            break;
    }
}


public List<TemplateCodeGenerationMetadata> GetBaseTemplates(IEnumerable<TemplateCodeGenerationMetadata> templates, List<TemplateCodeGenerationMetadata> foundTemplates = null)
{
    if(foundTemplates == null)
    {
        foundTemplates = new List<TemplateCodeGenerationMetadata>();
    }

    foreach (var template in templates)
    {
        if(!foundTemplates.Any(x=>x.Id == template.Id))
        {
            foundTemplates.Add(template);
            GetBaseTemplates(template.BaseTemplates, foundTemplates);
        }
    }

    return foundTemplates;
}

public string RenderBaseInterfaces(TemplateCodeGenerationMetadata template, TemplateType templateType = TemplateType.None)
{
    var bases = new System.Collections.Generic.List<string>(template.BaseTemplates.Count + 1);

    if (!IsRenderingParameters(template))
    {
        string defaultBaseTemplate;
        switch (templateType)
        {
            case TemplateType.Route:
                defaultBaseTemplate = "RouteData";
                break;
            case TemplateType.None:
            default:
                // No default base template for the "None" type
                defaultBaseTemplate = null;
                break;
        }
        if(defaultBaseTemplate != null)
        {
            bases.Add(defaultBaseTemplate);
        }        
    }

    if (IsRoute(template))
    {
        bases.Add("Sitecore.Override.PageBase");
    }

    // Add the base templates on the "None" type
    if (templateType == TemplateType.None)
    {
        foreach (var baseTemplate in template.BaseTemplates)
        {
            bases.Add($@"
            {GetNameSpace(baseTemplate, TemplateType.None)}.{baseTemplate.CodeName}");
        }
    }
    else
    {
        // Otherwise inherit from the "None" type
        if (!IsRenderingParameters(template))
        {
            bases.Add($@"
            {GetNameSpace(template, TemplateType.None)}.{template.CodeName}");
        }
    }

    if (bases.Any())
    {
        return $"{string.Join(" & ", bases)} & ";
    }

    return "";
}

public string RenderInterfaceFields(TemplateCodeGenerationMetadata template)
{
    var localCode = new System.Text.StringBuilder();    
        
    var fieldsCode = new System.Text.StringBuilder();
    foreach (var field in template.OwnFields)
    {
        fieldsCode.AppendLine($@"
            /**
            * {field.HelpText}
            */
            {GetFieldCodeName(field)}: {GetFieldType(field)};");
    }
    localCode.AppendLine($@"
        fields?: {{ {fieldsCode} 
        }}");        
    

    return localCode.ToString();
}


public string RenderInterfaceParamsFields(TemplateCodeGenerationMetadata template)
{
    var localCode = new System.Text.StringBuilder();    
    
    // Rendering parameters are always strings
    foreach (var field in template.OwnFields)
    {
        localCode.AppendLine($@"
        /**
            * {field.HelpText}
            */
        {GetFieldCodeName(field)}: string");
    }    

    return localCode.ToString();
}

public string GetFieldCodeName(TemplateFieldCodeGenerationMetadata field, string suffix = "")
{
    // Check if field name needs to be quoted and add quotes as needed
    var name = System.Text.RegularExpressions.Regex.IsMatch(field.Name, "[ -]+") ? $"\"{field.Name}{suffix}\"" : field.Name + suffix;
    
    // Item reference fields will return null if it is blank, but all other types will not be null
    if (GetFieldType(field) == "Sitecore.Override.ItemEx")
    {
        name += "?";
    }
    return name;
}

public string GetFieldType(TemplateFieldCodeGenerationMetadata field)
{
    switch (field.Type.ToLower())
    {
        //case "tristate":
        //    return "TriState";
        case "checkbox":
            return "Field<boolean>";

        case "date":
        case "datetime":
            return "Field<string>";

        case "number":
            return "Field<number>";

        case "integer":
            return "Field<number>";

        case "multiroot treelist":
        case "hztl multiroot treelist":
        case "treelist":
        case "treelistex":
        case "treelist descriptive":
        case "checklist":
        case "multilist":
            return "Sitecore.Override.ItemEx[]";
        case "grouped droplink":
        case "droplink":
        case "lookup":
        case "droptree":
        case "reference":
        case "tree":
            return "Sitecore.Override.ItemEx";

        case "file":
            return "FileField";

        case "image":
            return "ImageField";

        case "rich text":
        case "html":
            return "Field<string>";

        case "general link":
            return "LinkField";

        case "single-line text":
        case "multi-line text":
        case "frame":
        case "text":
        case "memo":
        case "droplist":
        case "grouped droplist":
        case "valuelookup":
            return "Field<string>";
        default:
            return "Field<string>";
    }
}

// Generates Glass Constants File

public string RenderConstantFields(TemplateCodeGenerationMetadata template)
{
    if (template.OwnFields.Length == 0)
    {
        return string.Empty;
    }

    var localCode = new System.Text.StringBuilder();

    localCode.Append($@"
        fields: {{");

    foreach (var field in template.OwnFields)
    {
        localCode.AppendLine($@"
            {GetFieldCodeName(field, "FieldId")}: ""{field.Id}"",
            {GetFieldCodeName(field, "FieldName")}: ""{field.Name}"",");
    }

    localCode.Append(@"
        }");

    return localCode.ToString();
}

public enum TemplateType { None, Route };